// SPDX-License-Identifier: MIT
pragma solidity =0.8.27;

import {IERC777Recipient} from "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol";
import {IERC1820Registry} from "@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol";
import {TokenWithSanction0} from "./TokenWithSanction0.sol";

contract TokenWithSanctionRecipient is IERC777Recipient {
    IERC1820Registry private constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);
    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");

    TokenWithSanction0 private immutable tokenContract;
    uint256 public receivedTokens;
    uint256 public lastReceivedAmount;
    address public lastOperator;
    address public lastSender;

    event TokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes userData,
        bytes operatorData
    );

    constructor(address tokenAddress) {
        tokenContract = TokenWithSanction0(tokenAddress);
        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), _TOKENS_RECIPIENT_INTERFACE_HASH, address(this));
    }

    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external override {
        require(!tokenContract.isAddressBanned(from), "the address of the sender is banned");
        receivedTokens += amount;
        lastReceivedAmount = amount;
        lastOperator = operator;
        lastSender = from;

        emit TokensReceived(operator, from, to, amount, userData, operatorData);
    }

    function getReceivedTokens() public view returns (uint256) {
        return receivedTokens;
    }

    function getLastReceivedInfo() public view returns (uint256, address, address) {
        return (lastReceivedAmount, lastOperator, lastSender);
    }
}
